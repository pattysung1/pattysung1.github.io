<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dynamic Programming on PattySung</title>
    <link>https://pattysung1.github.io/tags/dynamic-programming/</link>
    <description>Recent content in Dynamic Programming on PattySung</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Fri, 28 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://pattysung1.github.io/tags/dynamic-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode-746. Min Cost Climbing Stairs</title>
      <link>https://pattysung1.github.io/works/leetcode-746/</link>
      <pubDate>Fri, 28 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://pattysung1.github.io/works/leetcode-746/</guid>
      <description>&amp;lt;解題&amp;gt; 遞迴版本 計算爬到第 n 階的最小花費，即 cost[n] 加上爬到前一階和前兩階中花費較小的那個的最小花費。這是因為我們可以選擇爬到前一階或前兩階，然後再加上爬到當前階所需的花費： 遞迴關係：cost[i] += Math.min(cost[i-1], cost[i-2]); 最後return Math.</description>
    </item>
    
  </channel>
</rss>
